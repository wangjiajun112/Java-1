什么是封装？ 
面向对象的三大特征：封装q， 继承， 多态
类就是一种封装
封装的设计要求： 合理隐藏， 合理暴露
什么是封装： 就是用类设计对象处理某一个事物的数据时，应该把要处理的数据，以及处理这些数据的方法，设计到一个对象中去。
封装的的设计规范是什么样的？
合理隐藏，合理暴露
代码层面如何控制对象的成员公开或隐藏？
公开成员，可以使用public进行修饰。
隐藏成员，使用private进行修饰。

Javabean
实体类： 是一种特殊类，类中满足以下要求。
要求一： 类中的成员变量全部私有，并提供public修饰的get和set方法
即在student类中使用private 对成员变量进行私有。
然后使用public提供公开的getter 和setter方法可以对私有变量进行改动和获取。
无参构造器必须有，有参构造器可选。
要求二： 类中需要提供一个无参数构造器，有参数构造器可选。

实体类应用场景：
实体类的对象只负责数据存取，而对数据的业务处理交给其他类的对象来完成，以实现数据和数据业务处理分离。
在项目开发中，我们一般不会将业务处理方法也放在这个对象里面。只希望这个对象本身只负责数据的存和取。
而对于业务处理可以定义一个单独的对象中来处理。
这就对应着一个分层思想。实现数据和业务处理相分离。
创建一个学生的操作对象专门对学生的数据进行业务处理。

static关键字： 
① static修饰成员变量
成员变量按照有无static修饰分为两种，静态变量和实例变量
public class student {
  static String name;  //有static修饰，属于类，在计算机中只有一份，会被类的全部对象共享
  int age;// 实例变量是无static修饰的，属于每个对象。
}
静态变量的应用场景， 如果只需要一份，且希望能够被共享，则该数据可以定义成静态变量来记住。
系统启动后，假如要求用户类可以记住自己创建了多少个用户对象。
可以使用一个无参构造器， 每new一次 就可以实现numbr++;

② static修饰成员方法
静态方法： 有static修饰的成员方法，属于类，拿类名和对象名都可以方法
实例方法：无static修饰的成员方法，属于对象。只能用对象来访问。

静态方法的应用：
做工具类：工具类中的方法都是一些静态方法，每个方法用来完成一个功能，以便开发人员使用。
可以提高代码复用；调用方便，提高开发效率。
为什么工具类中的方法要用静态方法，而不用实例方法？
实例方法需要创建对象来调用，此时对象只是为了调用方法，对象占内存，这样会浪费内存。
静态方法，直接用类名调用即可，调用方便。

静态方法，实例方法访问相关的几点注意事项
静态方法中可以直接访问静态成员，不可以直接访问实例成员
实例方法中既可以直接访问静态成员，也可以直接访问实例成员
实例方法中可以出现this关键字，静态方法中不可出现this关键字。


继承是什么，为什么要继承？
提高代码的重用性
Java中提供了一个关键字extends，用这个关键字，可以让一个类和另一个类建立起父子关系。

继承后的注意事项：
权限修饰符、继承的特点、方法重写、子类构造器的特点

什么是权限修饰符？
就是用来限制类中的成员能够被访问的范围。
private 只能是本类
缺省 本类、同一个包中的类
protected 本类，同一个包中的类，子孙类中
public 任意位置都可以访问
怎么确定用什么修饰符呢？
成员变量大概率私有， 方法大概率公开


继承的特点：
单继承： Java是单继承模式，一个类只能继承一个直接父类。
多层继承：Java不支持多继承，但是支持多层继承。
祖宗类： Java中的所有类都是object类中的子类。
就近原则： 优先访问自己类中，自己类中没有才会访问父类。

单继承： 一个类只有一个直接继承
为什么不支持多继承呢？
可用反证法， 假设可以多继承，A, B 两个父类中都有method方法， 
此时C类同时继承A，B 的method方法会造成冲突

Java中的类是danjicheng
不可以多继承，但是可以多层继承
在子类方法中访问成员 就近原则，如果父类也没有就报错。
如果子父类中出现了重名的成员此时一定要在子类中使用父类的话，可以使用super来巧用父类成员变量/父类成员方法、

方法重写：
当子类觉得父类中的某个方法不好用，或者无法满足自己的需求时，子类可以重写一个方法名称、
参数列表一样的方法，去覆盖父类的这个方法，这就是方法重写。
方法重写的其他注意事项：
① 子类重写父类方法时，访问权限必须大于或者等于父类该方法的权限
② 重写的方法返回值类型，必须与被重写方法返回值类型相同，或者范围更小
③ 私有方法： 静态方法不能被重写，如果重写会报错。
因为私有方法不会被继承， 静态方法不能被重写是因为

方法重写：子类写了一个方法名称，形参列表与父类某个方法一样的 方法去覆盖父类的该方法

子类构造器的特点
子类的全部构造器，都会先调用父类的构造器，再执行自己。
默认情况下，子类全部构造器的第一行代码都是super()， 不管写不写都有， 他会去调用父类的无参构造器
如果父类没有构造器，那么就需要手写super()去指定调用父类的有参构造器。

final关键字可以修饰类，方法，变量
修饰类： 该类被称为最终类，特点是不能被继承
修饰方法： 该方法被称为最终方法，特点是不能被重写
修饰变量： 该变量仅能被赋值一次

final修饰变量的注意：
final修饰基本类型的变量，变量存储的数据不能改变
final修饰引用类型的变量，变量存储的地址不能被改变，但地址指向对象的内容可以被改变。
引用类型的变量可以是数组， 改变数组某一个地址的值

单例类（设计模式）
设计模式既是最优解。
关于设计模式， 考虑解决什么问题， 怎么写这个解决方案
单例设计模式： 确保某个类只能创建一个对象 
①把类的构造器私有
②定义一个类变量记住类的一个对象
③定义一个静态方法，返回对象

枚举类：
是一种特殊类，
写法：
修饰符 enum 枚举类名{
  名称1， 名称2， 
  其他成员..
}

特点：枚举类的第一行只能写枚举类的对象名称，要用逗号隔开
这些名称，本质是常量，每个常量都记住了枚举类的 一个对象。
枚举类应用场景：适合做信息的分类和标志
public enum Direction {
    UP, DOWN, LEFT, RIGHT;
}


抽象类：
在Java中有一个关键字，叫abstract， 他就是抽象的意思，可以修饰类，成员方法。
注意事项和特点：
抽象类中不一定要有抽象方法，有抽象方法的类必须是抽象类
类有的成员： 成员变量、方法、构造器，抽象类都可以有
抽象类最主要的特点： 抽象类不能创建对象，仅作为一种特殊的父类，让子类继承并实现
一个类继承抽象类，必须重写抽象类的全部抽象方法，否则这个类也必须定义成抽象类。

抽象类的好处：
父类知道每个子类都要实现某个行为，但每个子类要做的事情都不一样，
父类就将这个方法定义成抽象类，交给子类去重写。设计这样的抽象类，可以很好地实现多态。
模板方法设计模式：提供了一个方法作为完成某类功能的模板，模板方法封装了每个实现步骤，但允许子类提供特定的步骤实现。
可以再加上final修饰。

接口: Java提供了一个关键字interface定义出接口。
public interface 接口名{
    //常量
    //抽象方法
}
注意： 接口不能创建对象。
接口是用来被类实现的，实现接口的类称为实现类，一个类可以同时实现多个接口
修饰符 class 实现类类名 implements 接口1， 接口2...{
  //实现类实现多个接口，必须重写完全部接口的全部抽象方法，否则实现类需要定义成抽象类
}

接口的好处：
① 弥补了类单继承的不足，一个类同时可以实现多个接口，使类的角色更多，功能更强大
② 让程序可以面向接口编程，这样程序员就可以灵活方便的切换各种业务实现。

jdk8开始，接口中新增了三种方法：
① 默认方法： 使用default修饰，实现类的对象调用
② 静态方法： static修饰，必须当前接口名调用
③ 私有方法： private修饰，只能在接口内部被其他实例方法调用。

抽象类和接口的区别：
相同点：
都是抽象形式，都可以有抽象方法，都不能创建形式，都不能创建对象。
都是派生子类形式，抽象类是被子类继承使用，接口时被实现类实现。
一个类继承抽象类， 或者实现接口， 都必须重写完他们的抽象方法， 否者自己要成为抽象类或者报错。
都能支持多态，都能够实现解耦合。

不同点：
抽象类中可以定义类的全部成员， 接口只能定义常量， 抽象方法
抽象类只能被类单继承， 接口可以被类多实现
一个类继承抽象类就不能再继承其他类， 一个类实现了接口，还可以继承其他类或者实现其他接口
抽象类体现了模板思想，更利于做父类， 实现代码的复用性
接口更适合做功能的解耦合， 解耦合性更强。



代码块，内部类， 函数式编程， 常用API， GUI编程
类的五大成分： 成员变量， 构造器， 方法， 代码块， 内部类

代码块分为两种： 
  静态代码块：
    格式：static{}
    特点： 类加载时自动执行，由于类只会加载一次，所以静态代码块也只会执行一次
    作用：完成类的初始化
  实例代码块：
    格式：{}
    特点： 每次创建对象时， 执行实例代码块，并在构造器前执行
    作用： 和构造器一样， 都是用来完成对象的初始化的。

内部类：
如果一个类定义在另一个类的内部， 这个类就是内部类
场景： 当一个类的内部， 包含了一个完整的事物，且这个事物没有必要单独设计时，就可以把这个事物设计成内部类
成员内部类： 即使类中的一个普通成员，类似前面我们学过的普通的成员变量、成员方法。
局部内部类：是定义在方法中、代码块中、构造器等执行体中的类


匿名内部类：先认识， 常见形式， 应用场景
匿名内部类： 是一种特殊的局部内部类
所谓匿名： 指的是程序员不需要为这个类声明名字，默认有一个隐藏的名字
new 类或接口 （参数值） {
  类体（一般是方法重写）；
}；

Animal a = new Animal(){
  @Override
  public void cry(){
      sout.("喵喵喵");
  }
}
特点： 匿名内部类本质就是一个子类，并会立即创建出一个子类对象。
作用： 用于便捷地创建一个子类对象

匿名内部类常见使用形式：通常作为一个对象参数传给方法

使用comparator接口的匿名 内部类实现对数组进行排序
public class Test

函数式编程： 此函数类似于数学中的函数， 只要输入的数据一致，返回的结果也一致。
使用lambda函数可以替代某些匿名内部类对象，从而让程序代码更简洁，可读性更好。








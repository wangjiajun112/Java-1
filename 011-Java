Map集合的遍历方式： 键找值
① 先获取map的全部键，再通过遍历键来找值。
② 键值对
将键值对看作一个整体
Set<Map.Entry<String, Double> entries = map.entrySet();

for (Map.Entry<String, Double> entry : entries) {
    String key = entry.getKey();
    Double value = entry.getValue();
    sout.(key + value);
}


③ Lambda 表达式
常用到Map的如下方法
map.forEach((s, integer) -> System.out.println(s + ":" + integer));

Map集合的实现类：
实际上 Set集合的底层就是基于Map实现的，只是Set集合中的元素只要键数据，不要值数据。
hashmap  和  hashSet都是基于哈希表实现的。

LinkedHashMap的底层原理：

认识Stream流
优势： 大量结合了Lambda的语法格式，功能强大，性能搞笑，代码简洁，可读性好。
① 获取Stream流， Stream流代表一条流水线，并能与数据源建立链接
② 调用流水线的各种方法，对数据进行处理
③ 获取处理结果： 遍历， 统计， 收集到一个辛几何中返回。

对于Map 可以单独获取键流， 值流以及键值对流
        // 获取值流
        Stream<Integer> s2 = map.values().stream();
        // 获取键流
        Stream<String> s3 = map.keySet().stream();
        // 获取键值对流
        Stream<Map.Entry<String, Integer>> s4 = map.entrySet().stream();

Stream流终结方法：是指调用完成之后，不会返回新的Stream了， 没法继续使用流。
List<Teacher> teacherList = new ArrayList<>();
        teacherList.add(new Teacher("张三", 18, 5000));
        teacherList.add(new Teacher("李四", 28, 6000));
        teacherList.add(new Teacher("王五", 38, 7000));
        teacherList.add(new Teacher("赵六", 48, 8000));
        teacherList.add(new Teacher("孙七", 58, 9000));

        teacherList.stream().filter(t -> t.getSalary() > 7000).forEach(System.out::println);
        System.out.println

        long count = teacherList.stream().filter(t -> t.getSalary() > 7000).count();
        System.out.println(count);

        Optional<Teacher> max = teacherList.stream().max((t1, t2) -> Double.compare(t1.getSalary() , t2.getSalary()));
        System.out.println(max.get());
        
        Optional<Teacher> min = teacherList.stream().min((t1, t2) -> Double.compare(t1.getSalary() , t2.getSalary()));
        System.out.println(min.get());


收集Stream流： 就是把Stream流操作后的结果转回到集合或者数组中去返回。
Stream流： 方便操作集合/数组的手段； 

方法中的可变参数：就是一种特殊形参，定义在方法、构造器的形参列表里。 格式就是： 数据类型 ...参数名称
好处： 可以不传数据给他；可以传一个或者同时传多个数据给他；也可以传一个数组给他
常用来灵活地接收数据。
注意事项： 
可变参数在形参列表上只能有一个， 
可变参数必须放在形参列表的最后面。
可变参数在方法内部就是一个数组


Collections 工具类：
提供的常用静态方法


I/O流  存储数据的方案
File类的对象，用于代表当前系统的文件。
File 类只能对文件本身进行操作， 但是不能读写文件内部的数据。
IO流 用于读写数据（可以读写文件， 或者网络中的数据）

File file = new File("文件/文件夹/绝对路径/相对路径");
创建多级目录mkdirs()

遍历当前文件夹下的文件对象：
public File[] listFiles();


 


















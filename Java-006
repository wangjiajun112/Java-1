子类构造器
子类构造器的特点：
调用子类构造器会先调用 他的父类构造器， 再去执行自己的构造器。
可以使用 super()指定去调用父类的有参构造器。

为什么子类构造器一定要去调用父类构造器呢？
因为 默认情况下， 子类全部构造器的第一行代码都是super() 他会调用无参构造器。
如果父类没有无参构造器， 则我们必须在子类构造器的第一行手写super() 指定去调用父类的有参数构造器。
子类构造器可以通过调用父类构造器（super），把对象中包含父类这部分的数据初始化赋值
再回来把对象里包含子类这部分的数据也进行初始化赋值， 这样可以实现 初始化赋值

this() 调用兄弟构造器， 用来在本类中调用其他构造器
this() 和super() 都需要在第一行，不能同时出现。

多态： 
多态是在继承/实现情况下的一种现象， 表现为： 对象多态， 行为多态。
对象多态：
People p1 = new Student();
People p2 = new Teacher();
行为多态：
p1.run()
p2.run()

多态的前提： 有继承关系， 存在父类引用子类对象； 存在方法重写。
注意事项： 多态是对象、行为的多态， Java的属性不谈多态。

多态的好处：
在使用多态的形势下，右边对象是解耦合的，便于扩展和维护。

定义方法时， 使用父亲类型的形参，可以接受一切子类对象，扩展性更强，更便利。
多态下的类型数据转换：
自动类型转换：  父类 变量名 = new 子类();
强制类型转换： 子类 变量名 = (子类) 父类变量;
存在继承关系就可以在编译阶段进行强制类型转换，编译阶段不会报错
运行时，如果发现对象的真实类型与强制后的类型不同，就会报类型转换异常的错误。
建议强制转换之前， 使用instanceof关键字，判断当前对象的真实类型，再进行强转。
综合案例：加油站支付小模块


面向对象高级：final， 单例类， 枚举类， 抽象类， 接口
认识final关键字：可以修饰类、方法、变量
修饰类： 该类被称为最终类，特点是 不能被继承了
修饰方法： 该方法被称为最终方法，特点是不能被重写
修饰变量：该变量有且仅能被赋值一次。















